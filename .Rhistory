dotplot(go)
kegg <- enrichKEGG(
gene = to.id(df)$ENTREZID,
organism = "hsa",
keyType = "kegg",
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
minGSSize = 10,
maxGSSize = 500,
qvalueCutoff = 0.2,
use_internal_data = FALSE)
kegg
dotplot(kegg)
use
library(tidyverse)
library(DESeq2)
library(ggrepel)
library(ComplexHeatmap)
library(clusterProfiler)
dir.create(str_glue("out/deseq_tables/"))
dir.create(str_glue("out/deseq_plots/"))
plot_theme <-
theme_bw()+
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 13,color = "black"))
df <- read.table("data/raw_gene.txt", header = T, row.names = 1)
gene.ann <- read.table("data/gene_symbol.txt", header = T)
AD.gr <- read_tsv("data/AD_gr.txt")
UB.gr <- read_tsv("data/UB_gr.txt")
fpkm <- read_tsv("data/fpkm_gene.txt")
#group.all <- data.frame(
#  samples = names(df),
#  group = gsub("\\_\\d+$", "", names(df)),
#  origin = gsub("^([A-Za-z]+)_.+", "\\1", names(df))
#)
p <- 0.05
fc <- 2
lable.num <- 10
for (ori in c("AD", "UB")) {
degs.all <- list()
# AD or UB
data.use <- ori
if (data.use == "AD") {
use <- AD.gr
}else if (data.use == "UB") {
use <- UB.gr
}
dir.create(str_glue("out/deseq_tables/{data.use}"))
dir.create(str_glue("out/deseq_plots/{data.use}"))
for (v1 in seq_along(use$col1)) {
v1.gr <- use[v1, 1]$col1
v2.gr <- use[v1, 2]$col2
df.use <- df %>%
select(names(.)[str_detect(names(.), v1.gr) | str_detect(names(.), v2.gr)]) %>%
filter(rowSums(.) > 0)
group.list <- gsub("\\_\\d+$", "", names(df.use))
# deseq
colData <- data.frame(row.names=colnames(df.use),
group_list=factor(group.list, levels = c(v1.gr, v2.gr)))
dds <- DESeqDataSetFromMatrix(countData = df.use,
colData = colData,
design = ~ group_list)
dds <- DESeq(dds)
res <- as.data.frame(results(dds, contrast=c("group_list",v1.gr, v2.gr)))
# drop NA
res <- res %>%
as.data.frame(.) %>%
filter(!is.na(padj)) %>%
mutate(gene_id = rownames(.)) %>%
left_join(gene.ann, by = "gene_id")
# plot VOL
res <- res %>% mutate(
stat =  case_when(
(padj <= p & log2FoldChange >= fc) ~ "up",
(padj <= p & log2FoldChange <= -fc) ~ "down",
TRUE ~ "None"
)
)
# marks table
# fc
label.fc <- res %>%
filter(stat %in% c("up", "down")) %>%
group_by(stat) %>%
top_n(round(lable.num/2, 0),wt = abs(log2FoldChange)) %>%
ungroup()
label.p <- res %>%
filter(stat %in% c("up", "down")) %>%
group_by(stat) %>%
top_n(round(lable.num/2, 0),wt = -padj)%>%
ungroup()
lable.df <- rbind(label.p, label.fc) %>% distinct()
p.vol <- ggplot(res, aes(log2FoldChange, -log10(padj), color = stat)) +
geom_point(size = 0.7) +
geom_label_repel(lable.df, mapping = aes(log2FoldChange, -log10(padj),label = gene),show.legend = F)+
scale_color_manual(values = c(up = "#F26522", down = "#00AEEF", None ="gray")) +
geom_hline(aes(yintercept=-log10(p)), linewidth = 1, linetype="dashed", color = "gray70") +
geom_vline(aes(xintercept=fc), linewidth = 0.5, linetype="dashed", color = "gray70") +
geom_vline(aes(xintercept=-fc), linewidth = 0.5, linetype="dashed", color = "gray70") +
ggtitle(str_glue("{v1.gr}.vs.{v2.gr}"))+
theme_bw() + plot_theme
res <- res %>%
select(gene_id, gene, log2FoldChange, padj, stat) %>%
mutate(log2FoldChange = round(log2FoldChange, 4),
padj  = round(padj, 4))
degs.all[[v1]] <- res %>% mutate(group = str_glue("{v1.gr}_vs_{v2.gr}"))
write_tsv(res,
str_glue("out/deseq_tables/{data.use}/{data.use}_{v1.gr}_vs_{v2.gr}.txt")
)
ggsave(filename = str_glue("out/deseq_plots/{data.use}/{data.use}_{v1.gr}_vs_{v2.gr}.png"),
plot = p.vol,
device = "png",
width = 8,
height = 8)
use.genes <- res %>% filter(stat %in% c("up", "down")) %>% .$gene_id
count.data <- df.use[rownames(df.use) %in% use.genes, ]
count.data <- count.data %>%
mutate(gene_id = rownames(.)) %>%
left_join(gene.ann, by = "gene_id")
write_tsv(count.data,
str_glue("out/deseq_tables/{data.use}/{data.use}_{v1.gr}_vs_{v2.gr}_count.txt"))
write_tsv(lable.df,
str_glue("out/deseq_tables/{data.use}/{data.use}_{v1.gr}_vs_{v2.gr}_top.txt"))
}
degs.all.df <- do.call("rbind", degs.all)
degs.count.df <- degs.all.df %>%
group_by(c(group, stat)) %>% summarise(ngenes = n())
write_tsv(degs.count.df,
str_glue("out/deseq_tables/{data.use}/{data.use}_DEGs_count.txt")
)
}
library(tidyverse)
library(DESeq2)
library(ggrepel)
dir.create(str_glue("out/deseq_tables/"))
dir.create(str_glue("out/deseq_plots/"))
dir.create(str_glue("out/deseq_tables/"),recursive = T)
dir.create(str_glue("out/deseq_plots/"), recursive = T)
plot_theme <-
theme_bw()+
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 13,color = "black"))
df <- read.table("data/raw_gene.txt", header = T, row.names = 1)
gene.ann <- read.table("data/gene_symbol.txt", header = T)
AD.gr <- read_tsv("data/AD_gr.txt")
UB.gr <- read_tsv("data/UB_gr.txt")
AD.gr
UB.gr
p <- 0.05
fc <- 2
lable.num <- 10
library(tidyverse)
library(DESeq2)
library(ggrepel)
#library(ComplexHeatmap)
dir.create(str_glue("out/deseq_tables/"),recursive = T)
dir.create(str_glue("out/deseq_plots/"), recursive = T)
plot_theme <-
theme_bw()+
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 13,color = "black"))
df <- read.table("data/raw_gene.txt", header = T, row.names = 1)
gene.ann <- read.table("data/gene_symbol.txt", header = T)
AD.gr <- read_tsv("data/AD_gr.txt")
UB.gr <- read_tsv("data/UB_gr.txt")
p <- 0.05
fc <- 2
lable.num <- 10
for (ori in c("AD")) {
degs.all <- list()
# AD or UB
data.use <- ori
if (data.use == "AD") {
use <- AD.gr
}else if (data.use == "UB") {
use <- UB.gr
}
dir.create(str_glue("out/deseq_tables/{data.use}"))
dir.create(str_glue("out/deseq_plots/{data.use}"))
for (v1 in seq_along(use$col1)) {
v1.gr <- use[v1, 1]$col1
v2.gr <- use[v1, 2]$col2
df.use <- df %>%
select(names(.)[str_detect(names(.), v1.gr) | str_detect(names(.), v2.gr)]) %>%
filter(rowSums(.) > 0)
group.list <- gsub("\\_\\d+$", "", names(df.use))
# deseq
colData <- data.frame(row.names=colnames(df.use),
group_list=factor(group.list, levels = c(v1.gr, v2.gr)))
dds <- DESeqDataSetFromMatrix(countData = df.use,
colData = colData,
design = ~ group_list)
dds <- DESeq(dds)
res <- as.data.frame(results(dds, contrast=c("group_list",v1.gr, v2.gr)))
# drop NA
res <- res %>%
as.data.frame(.) %>%
filter(!is.na(padj)) %>%
mutate(gene_id = rownames(.)) %>%
left_join(gene.ann, by = "gene_id")
# plot VOL
res <- res %>% mutate(
stat =  case_when(
(padj <= p & log2FoldChange >= fc) ~ "up",
(padj <= p & log2FoldChange <= -fc) ~ "down",
TRUE ~ "None"
)
)
# marks table
# fc
label.fc <- res %>%
filter(stat %in% c("up", "down")) %>%
group_by(stat) %>%
top_n(round(lable.num/2, 0),wt = abs(log2FoldChange)) %>%
ungroup()
label.p <- res %>%
filter(stat %in% c("up", "down")) %>%
group_by(stat) %>%
top_n(round(lable.num/2, 0),wt = -padj)%>%
ungroup()
lable.df <- rbind(label.p, label.fc) %>% distinct()
p.vol <- ggplot(res, aes(log2FoldChange, -log10(padj), color = stat)) +
geom_point(size = 0.7) +
geom_label_repel(lable.df, mapping = aes(log2FoldChange, -log10(padj),label = gene),show.legend = F)+
scale_color_manual(values = c(up = "#F26522", down = "#00AEEF", None ="gray")) +
geom_hline(aes(yintercept=-log10(p)), linewidth = 1, linetype="dashed", color = "gray70") +
geom_vline(aes(xintercept=fc), linewidth = 0.5, linetype="dashed", color = "gray70") +
geom_vline(aes(xintercept=-fc), linewidth = 0.5, linetype="dashed", color = "gray70") +
ggtitle(str_glue("{v1.gr}.vs.{v2.gr}"))+
theme_bw() + plot_theme
res.out <- res %>%
select(gene_id, gene, log2FoldChange, padj, stat) %>%
mutate(log2FoldChange = round(log2FoldChange, 4),
padj  = round(padj, 4))
degs.all[[v1]] <- res %>% mutate(group = str_glue("{v1.gr}_vs_{v2.gr}"))
write_tsv(res.out,
str_glue("out/deseq_tables/{data.use}/{data.use}_{v1.gr}_vs_{v2.gr}.txt")
)
ggsave(filename = str_glue("out/deseq_plots/{data.use}/{data.use}_{v1.gr}_vs_{v2.gr}.png"),
plot = p.vol,
device = "png",
width = 8,
height = 8)
use.genes <- res %>% filter(stat %in% c("up", "down")) %>% .$gene_id
count.data <- df.use[rownames(df.use) %in% use.genes, ]
count.data <- count.data %>%
mutate(gene_id = rownames(.)) %>%
left_join(gene.ann, by = "gene_id")
write_tsv(count.data,
str_glue("out/deseq_tables/{data.use}/{data.use}_{v1.gr}_vs_{v2.gr}_count.txt"))
write_tsv(lable.df,
str_glue("out/deseq_tables/{data.use}/{data.use}_{v1.gr}_vs_{v2.gr}_top.txt"))
}
degs.all.df <- do.call("rbind", degs.all)
degs.count.df <- degs.all.df %>%
group_by(group, stat) %>% summarise(ngenes = n()) %>%
filter(!stat %in% "None")
p <- ggplot(degs.count.df, aes(group, ngenes, fill = stat)) +
geom_bar(stat = "identity",
position = position_dodge(0.75),width = 0.75) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
write_tsv(degs.count.df,
str_glue("out/deseq_tables/{data.use}/{data.use}_DEGs_count.txt"))
ggsave(filename = str_glue("out/deseq_plots/{data.use}/{data.use}_DEGs.png"),
plot = p,
device = "png",
width = 8,
height = 5)
degs.all <- list()
}
library(tidyverse)
library(DESeq2)
library(ggrepel)
#library(ComplexHeatmap)
dir.create(str_glue("out/deseq_tables/"),recursive = T)
dir.create(str_glue("out/deseq_plots/"), recursive = T)
plot_theme <-
theme_bw()+
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 13,color = "black"))
df <- read.table("data/raw_gene.txt", header = T, row.names = 1)
gene.ann <- read.table("data/gene_symbol.txt", header = T)
AD.gr <- read_tsv("data/AD_gr.txt")
UB.gr <- read_tsv("data/UB_gr.txt")
p <- 0.05
fc <- 2
lable.num <- 10
for (ori in c("UB")) {
degs.all <- list()
# AD or UB
data.use <- ori
if (data.use == "AD") {
use <- AD.gr
}else if (data.use == "UB") {
use <- UB.gr
}
dir.create(str_glue("out/deseq_tables/{data.use}"))
dir.create(str_glue("out/deseq_plots/{data.use}"))
for (v1 in seq_along(use$col1)) {
v1.gr <- use[v1, 1]$col1
v2.gr <- use[v1, 2]$col2
df.use <- df %>%
select(names(.)[str_detect(names(.), v1.gr) | str_detect(names(.), v2.gr)]) %>%
filter(rowSums(.) > 0)
group.list <- gsub("\\_\\d+$", "", names(df.use))
# deseq
colData <- data.frame(row.names=colnames(df.use),
group_list=factor(group.list, levels = c(v1.gr, v2.gr)))
dds <- DESeqDataSetFromMatrix(countData = df.use,
colData = colData,
design = ~ group_list)
dds <- DESeq(dds)
res <- as.data.frame(results(dds, contrast=c("group_list",v1.gr, v2.gr)))
# drop NA
res <- res %>%
as.data.frame(.) %>%
filter(!is.na(padj)) %>%
mutate(gene_id = rownames(.)) %>%
left_join(gene.ann, by = "gene_id")
# plot VOL
res <- res %>% mutate(
stat =  case_when(
(padj <= p & log2FoldChange >= fc) ~ "up",
(padj <= p & log2FoldChange <= -fc) ~ "down",
TRUE ~ "None"
)
)
# marks table
# fc
label.fc <- res %>%
filter(stat %in% c("up", "down")) %>%
group_by(stat) %>%
top_n(round(lable.num/2, 0),wt = abs(log2FoldChange)) %>%
ungroup()
label.p <- res %>%
filter(stat %in% c("up", "down")) %>%
group_by(stat) %>%
top_n(round(lable.num/2, 0),wt = -padj)%>%
ungroup()
lable.df <- rbind(label.p, label.fc) %>% distinct()
p.vol <- ggplot(res, aes(log2FoldChange, -log10(padj), color = stat)) +
geom_point(size = 0.7) +
geom_label_repel(lable.df, mapping = aes(log2FoldChange, -log10(padj),label = gene),show.legend = F)+
scale_color_manual(values = c(up = "#F26522", down = "#00AEEF", None ="gray")) +
geom_hline(aes(yintercept=-log10(p)), linewidth = 1, linetype="dashed", color = "gray70") +
geom_vline(aes(xintercept=fc), linewidth = 0.5, linetype="dashed", color = "gray70") +
geom_vline(aes(xintercept=-fc), linewidth = 0.5, linetype="dashed", color = "gray70") +
ggtitle(str_glue("{v1.gr}.vs.{v2.gr}"))+
theme_bw() + plot_theme
res.out <- res %>%
select(gene_id, gene, log2FoldChange, padj, stat) %>%
mutate(log2FoldChange = round(log2FoldChange, 4),
padj  = round(padj, 4))
degs.all[[v1]] <- res %>% mutate(group = str_glue("{v1.gr}_vs_{v2.gr}"))
write_tsv(res.out,
str_glue("out/deseq_tables/{data.use}/{data.use}_{v1.gr}_vs_{v2.gr}.txt")
)
ggsave(filename = str_glue("out/deseq_plots/{data.use}/{data.use}_{v1.gr}_vs_{v2.gr}.png"),
plot = p.vol,
device = "png",
width = 8,
height = 8)
use.genes <- res %>% filter(stat %in% c("up", "down")) %>% .$gene_id
count.data <- df.use[rownames(df.use) %in% use.genes, ]
count.data <- count.data %>%
mutate(gene_id = rownames(.)) %>%
left_join(gene.ann, by = "gene_id")
write_tsv(count.data,
str_glue("out/deseq_tables/{data.use}/{data.use}_{v1.gr}_vs_{v2.gr}_count.txt"))
write_tsv(lable.df,
str_glue("out/deseq_tables/{data.use}/{data.use}_{v1.gr}_vs_{v2.gr}_top.txt"))
}
degs.all.df <- do.call("rbind", degs.all)
degs.count.df <- degs.all.df %>%
group_by(group, stat) %>% summarise(ngenes = n()) %>%
filter(!stat %in% "None")
p <- ggplot(degs.count.df, aes(group, ngenes, fill = stat)) +
geom_bar(stat = "identity",
position = position_dodge(0.75),width = 0.75) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
write_tsv(degs.count.df,
str_glue("out/deseq_tables/{data.use}/{data.use}_DEGs_count.txt"))
ggsave(filename = str_glue("out/deseq_plots/{data.use}/{data.use}_DEGs.png"),
plot = p,
device = "png",
width = 8,
height = 5)
degs.all <- list()
}
library(UpSetR)
library(tidyverse)
library(patchwork)
AD.gr <- read_tsv("data/AD_gr.txt")
UB.gr <- read_tsv("data/UB_gr.txt")
dir.create("out/upsets/tables/",recursive = T)
dir.create("out/upsets/tables/AD",recursive = T)
dir.create("out/upsets/tables/UB",recursive = T)
get.unique.genes <- function(df, colname) {
df <- df %>% as_tibble()
f <- rowSums(df %>% filter(across(all_of(colname)) == 1) %>% dplyr::select_if(is.numeric)) == 1
df.out <- df %>% filter(across(all_of(colname)) == 1)
return(df.out[f,])
}
for (use.gr in c("AD", "UB")) {
dir.create(str_glue("./out/upsets/{use.gr}/"))
if (use.gr == "AD") {
use <- AD.gr
}else{
use <- UB.gr
}
exp.all <- list()
use.cols <- c()
for (v1 in seq_along(use$col1)) {
v1.gr <- use[v1, 1]$col1
v2.gr <- use[v1, 2]$col2
df.use <- read_tsv(str_glue("out/deseq_tables/{use.gr}/{use.gr}_{v1.gr}_vs_{v2.gr}.txt"))
use.cols <- append(use.cols, str_glue("{v1.gr}_vs_{v2.gr}"))
df.use <- df.use %>% filter(!stat %in% "None") %>%
mutate(is_use = 1, group = str_glue("{v1.gr}_vs_{v2.gr}"))
exp.all[[v1]] <- df.use
}
all.df <- do.call("rbind", exp.all) %>%
dplyr::select(-log2FoldChange, -padj, -gene_id) %>%
spread(key = group, value = is_use )
all.df[is.na(all.df)] <- 0
write_tsv(all.df, str_glue("out/upsets/tables/{use.gr}_DEGs_table.txt"))
all.df$name <- str_c(all.df$gene, "_", all.df$stat)
all.df <- all.df %>%  column_to_rownames("name")
p <- upset(data = all.df, point.size = 2,
sets = use.cols,
main.bar.color = "#00AEEF",
queries = list(
list(
query = elements, params = list("stat", "up"),color = c("#F26522"),active = T
)
)
)
pdf.name <- str_glue("out/upsets/{use.gr}/{use.gr}_DEGs_upsets.pdf")
pdf(file = pdf.name,height=5,width=10)
print (p)
dev.off()
# unique genes
for (v1 in seq_along(use$col1)) {
v1.gr <- use[v1, 1]$col1
v2.gr <- use[v1, 2]$col2
uniqu.gene.df <- get.unique.genes(all.df, str_glue("{v1.gr}_vs_{v2.gr}"))[,c("gene", "stat")]
write_tsv(uniqu.gene.df,str_glue("./out/upsets/tables/{use.gr}/{use.gr}_{v1.gr}_vs_{v2.gr}_DEGs_unique.txt"))
}
}
library(UpSetR)
library(tidyverse)
library(patchwork)
AD.gr <- read_tsv("data/AD_gr.txt")
UB.gr <- read_tsv("data/UB_gr.txt")
dir.create("out/upsets/tables/",recursive = T)
dir.create("out/upsets/tables/AD",recursive = T)
dir.create("out/upsets/tables/UB",recursive = T)
get.unique.genes <- function(df, colname) {
df <- df %>% as_tibble()
f <- rowSums(df %>% filter(across(all_of(colname)) == 1) %>% dplyr::select_if(is.numeric)) == 1
df.out <- df %>% filter(across(all_of(colname)) == 1)
return(df.out[f,])
}
for (use.gr in c("AD", "UB")) {
dir.create(str_glue("./out/upsets/{use.gr}/"))
if (use.gr == "AD") {
use <- AD.gr
}else{
use <- UB.gr
}
exp.all <- list()
use.cols <- c()
for (v1 in seq_along(use$col1)) {
v1.gr <- use[v1, 1]$col1
v2.gr <- use[v1, 2]$col2
df.use <- read_tsv(str_glue("out/deseq_tables/{use.gr}/{use.gr}_{v1.gr}_vs_{v2.gr}.txt"))
use.cols <- append(use.cols, str_glue("{v1.gr}_vs_{v2.gr}"))
df.use <- df.use %>% filter(!stat %in% "None") %>%
mutate(is_use = 1, group = str_glue("{v1.gr}_vs_{v2.gr}"))
exp.all[[v1]] <- df.use
}
all.df <- do.call("rbind", exp.all) %>%
dplyr::select(-log2FoldChange, -padj, -gene_id) %>%
spread(key = group, value = is_use )
all.df[is.na(all.df)] <- 0
write_tsv(all.df, str_glue("out/upsets/tables/{use.gr}_DEGs_table.txt"))
all.df$name <- str_c(all.df$gene, "_", all.df$stat)
all.df <- all.df %>%  column_to_rownames("name")
p <- upset(data = all.df, point.size = 2,
sets = use.cols,
main.bar.color = "#00AEEF",
queries = list(
list(
query = elements, params = list("stat", "up"),color = c("#F26522"),active = T
)
)
)
pdf.name <- str_glue("out/upsets/{use.gr}/{use.gr}_DEGs_upsets.pdf")
pdf(file = pdf.name,height=5,width=10)
print (p)
dev.off()
# unique genes
for (v1 in seq_along(use$col1)) {
v1.gr <- use[v1, 1]$col1
v2.gr <- use[v1, 2]$col2
uniqu.gene.df <- get.unique.genes(all.df, str_glue("{v1.gr}_vs_{v2.gr}"))[,c("gene", "stat")]
write_tsv(uniqu.gene.df,str_glue("./out/upsets/tables/{use.gr}/{use.gr}_{v1.gr}_vs_{v2.gr}_DEGs_unique.txt"))
}
}
